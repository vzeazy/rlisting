<?php
/**
 * @file
 *  Install file for listing node type
 */


/**
 * implementation of hook_install();
 */
function rlisting_install() {

};

/**
 * implementation of hook_enable
 */
function rlisting_enable() {

  // create the content-type
  _rlisting_create_node_type();
  _rlisting_attach_fields('rlisting');
  _rlisting_image_setup();
  _rlisting_setup_vocab();
  _rlisting_image_styles();

}

/** 
 * helper function to create the default fields.
 */
function _rlisting_attach_fields($node_type) {

  $fields = array(
    array('name' => 'rlisting_price', 'label' => 'Price', 'type' => 'number_decimal', 'required' => FALSE, 'settings' => NULL),
    array('name' => 'rlisting_maintenance_fee', 'label' => 'Maintenance Price', 'type' => 'number_decimal', 'required' => FALSE, 'settings' => NULL),
    array('name' => 'rlisting_mls', 'label' => 'MLS', 'type' => 'text', 'required' => FALSE, 'settings' => NULL),
    array('name' => 'rlisting_bedroom', 'label' => 'Bed Rooms','type' => 'number_integer', 'required' => FALSE, 'settings' => NULL),
    array('name' => 'rlisting_bathroom', 'label' => 'Bath Rooms','type' => 'number_integer', 'required' => FALSE, 'settings' => NULL),
    array('name' => 'rlisting_yearbuilt', 'label' => 'Year Built','type' => 'number_integer', 'required' => FALSE, 'settings' => NULL),
    array('name' => 'rlisting_floorsize', 'label' => 'Lot Size','type' => 'number_integer', 'required' => FALSE, 'settings' => NULL),
    array('name' => 'rlisting_lotsize', 'label' => 'Land Size','type' => 'number_integer', 'required' => FALSE, 'settings' => NULL),
    array('name' => 'rlisting_parking', 'label' => 'Parking','type' => 'number_integer', 'required' => FALSE, 'settings' => NULL),
    array('name' => 'rlisting_location', 'label' => 'Location', 'type' => 'location', 'required' => TRUE, 'settings' => array('location_settings' => array())),
    array(
      'name' => 'rlisting_building_type',
      'label' => 'Building Type',
      'type' => 'list_integer',
      'required' => TRUE,
      'settings' => array(
        'allowed_values' => array(
          '1' => 'House',
          '2' => 'Row/Townhouse',
          '3' => 'Apartment/Condo',
          '4' => 'Loft',
          '5' => 'Duplex',
          '6' => 'Triplex',
          '7' => 'Fourplex',
          '8' => 'Mobile Home',
        ), 
      ),
    ),
    array(
      'name' => 'rlisting_listing_type',
      'label' => 'Listing Type',
      'type' => 'list_integer',
      'required' => TRUE,
      'settings' => array(
        'allowed_values' => array(
          '1' => 'For Sale',
          '2' => 'For Rent',
          '3' => 'For Lease',
        ), 
      ),
    ),
    array(
      'name' => 'rlisting_features',
      'label' => 'Features',
      'type' => 'list_integer',
      'required' => FALSE,
      'cardinality' => -1,
      'widget' => array(
        'type' => 'options_buttons',
        'module' => 'options',
        'active' => 1,
      ),
      'settings' => array(
        'allowed_values' => array(
          '1' => 'Fireplace',
          '2' => 'Workshop',
          '3' => 'Air Conditioned',
          '4' => 'Acreage',
          '5' => 'Pool',
          '6' => 'Balcony',
          '7' => 'Patio',
          '8' => 'Air Conditioning',
        ), 
      ),
    ),
  );

  foreach ($fields as $field_info) {
    $field = field_info_field($field_info['name']);
    $instance = field_info_instance('node', $field_info['name'], $node_type);

    if (empty($field)) {
      // create field
      $field = array(
        'field_name' => $field_info['name'],
        'type' => $field_info['type'],
      );
      if ($field_info['settings']) {
        $field['settings'] = $field_info['settings'];
      };
      if (!empty($field_info['cardinality'])) {
        $field['cardinality'] = $field_info['cardinality'];
      };
      $field = field_create_field($field);
      drupal_set_message($field['field_name'] . ' created for rListing');
    };

    if (empty($instance)) {
      if (!empty($field_info['widget'])) {
        $instance = array(
          'field_name' => $field_info['name'],
          'entity_type' => 'node',
          'bundle' => $node_type,
          'label' => $field_info['label'],
          'required' => ($field_info['required'])? $field_info['required'] : FALSE,
          'widget' => array(
            'type' => $field_info['widget']['type'],
          ),
        );
      }
      else {
        $instance = array(
          'field_name' => $field_info['name'],
          'entity_type' => 'node',
          'bundle' => $node_type,
          'label' => $field_info['label'],
          'required' => ($field_info['required'])? $field_info['required'] : FALSE,
          'widget' => array(
            'type' => $field_info['type'],
          ),
        );
      };

      field_create_instance($instance);
    };
  };

};

/**
 * helper function to create the node type
 */
function _rlisting_create_node_type() {

  $node_type = array(
    'type'  => 'rlisting',
    'name' => t('Listing'),
    'base' => 'node_content',
    'description' => t('Real Estate Listing'),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );

  $node_type = node_type_set_defaults($node_type);
  node_add_body_field($node_type);
  node_type_save($node_type);

};

/**
 * Setup the image field
 */
function _rlisting_image_setup() {

  // lets add an image field
  $field = field_info_field('rlisting_photos');
  $instance = field_info_instance('node','rlisting_photos', 'rlisting');
  if (empty($field)) {
    $field = array(
              'field_name' => 'rlisting_photos',
              'type'  => 'image',
              'cardinality'  => -1,
            );
    $field = field_create_field($field);
    drupal_set_message($field['field_name'] . ' created for rListing');
  };
  if (empty($instance)) {
    $instance = array(
      'field_name' => 'rlisting_photos',
      'entity_type' => 'node',
      'bundle' => 'rlisting',
      'label' => 'Photos',
      'required' => TRUE,
      'widget'    => array(
        'type' => 'image',
      )
    );
    field_create_instance($instance);
  }
};

/**
 * setup the vocab.
 */
function _rlisting_setup_vocab() {

  $vocabulary = taxonomy_vocabulary_load(variable_get('rlisting_listing_tag', 0));
  if (!$vocabulary) {
    $edit = array(
      'name' => t('Listing Tag'),
      'machine_name' => 'rlisting_tag',
      'description' => t('Listing Tag'),
      'hierarchy' => 1,
      'module' => 'rlisting',
    );
    $vocabulary = (object) $edit;
    taxonomy_vocabulary_save($vocabulary);
    variable_set('rlisting_listing_tag', $vocabulary->vid);
  }

  // Create the field 
  if (!field_info_field('taxonomy_listing_tag')) {
    $field = array(
      'field_name' => 'taxonomy_listing_tag',
      'type' => 'taxonomy_term_reference',
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $vocabulary->machine_name,
            'parent' => 0,
          ),
        ),
      ),
    );
    field_create_field($field);

    // Create a default tag 
    $edit = array(
      'name' => t('Featured Left Listing'),
      'description' => '',
      'parent' => array(0),
      'vid' => $vocabulary->vid,
    );
    $term = (object) $edit;
    taxonomy_term_save($term);

    $edit = array(
      'name' => t('Featured Right Listing'),
      'description' => '',
      'parent' => array(0),
      'vid' => $vocabulary->vid,
    );
    $term = (object) $edit;
    taxonomy_term_save($term);

    $edit = array(
      'name' => t('Showcase Listing'),
      'description' => '',
      'parent' => array(0),
      'vid' => $vocabulary->vid,
    );
    $term = (object) $edit;
    taxonomy_term_save($term);

    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'taxonomy_listing_tag',
      'entity_type' => 'node',
      'label' => $vocabulary->name,
      'bundle' => 'rlisting',
      'required' => FALSE,
      'widget' => array(
        'type' => 'options_select',
      ),
      'display' => array(
        'default' => array(
          'type' => 'taxonomy_term_reference_link',
        ),
        'teaser' => array(
          'type' => 'taxonomy_term_reference_link',
        ),
      ),
    );
    field_create_instance($instance);
  };

  // Ensure the forum node type is available.
  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types['rlisting']);

};

/**
 * setup image styles
 */
function _rlisting_image_styles() {

  $image_style = image_style_load('rlisting-medium');
  if (!$image_style) {
    $profile_style = array(
      'name' => 'rlisting-medium',
      'module' => 'rlisting',
    );
    $style = image_style_save($profile_style);
    $effects = array(
      'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
      'effect callback' => 'image_scale_crop_effect',
      'form callback' => 'image_resize_form',
      'summary theme' => 'image_resize_summary',
      'module'    => 'image',
      'name'  => 'image_scale_and_crop',
      'data'  => array(
        'width' => 425,
        'height' => 300,
      ),
      'isid' => $style['isid'],
    );
    image_effect_save($effects);
  };

  $image_style = image_style_load('rlisting-thumbnail');
  if (!$image_style) {
    $profile_style = array(
      'name' => 'rlisting-thumbnail',
      'module' => 'rlisting',
    );
    $style = image_style_save($profile_style);
    $effects = array(
      'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
      'effect callback' => 'image_scale_crop_effect',
      'form callback' => 'image_resize_form',
      'summary theme' => 'image_resize_summary',
      'module'    => 'image',
      'name'  => 'image_scale_and_crop',
      'data'  => array(
        'width' => 75,
        'height' => 75,
      ),
      'isid' => $style['isid'],
    );
    image_effect_save($effects);
  };

  $image_style = image_style_load('rlisting-feature-block');
  if (!$image_style) {
    $profile_style = array(
      'name' => 'rlisting-feature-block',
      'module' => 'rlisting',
    );
    $style = image_style_save($profile_style);
    $effects = array(
      'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
      'effect callback' => 'image_scale_crop_effect',
      'form callback' => 'image_resize_form',
      'summary theme' => 'image_resize_summary',
      'module'    => 'image',
      'name'  => 'image_scale_and_crop',
      'data'  => array(
        'width' => 350,
        'height' => 200,
      ),
      'isid' => $style['isid'],
    );
    image_effect_save($effects);
  };

  $image_style = image_style_load('rlisting-mini');
  if (!$image_style) {
    $profile_style = array(
      'name' => 'rlisting-mini',
      'module' => 'rlisting',
    );
    $style = image_style_save($profile_style);
    $effects = array(
      'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
      'effect callback' => 'image_scale_crop_effect',
      'form callback' => 'image_resize_form',
      'summary theme' => 'image_resize_summary',
      'module'    => 'image',
      'name'  => 'image_scale_and_crop',
      'data'  => array(
        'width' => 50,
        'height' => 50,
      ),
      'isid' => $style['isid'],
    );
    image_effect_save($effects);
  };

  $image_style = image_style_load('rlisting-showcase');
  if (!$image_style) {
    $profile_style = array(
      'name' => 'rlisting-showcase',
      'module' => 'rlisting',
    );
    $style = image_style_save($profile_style);
    $effects = array(
      'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
      'effect callback' => 'image_scale_crop_effect',
      'form callback' => 'image_resize_form',
      'summary theme' => 'image_resize_summary',
      'module'    => 'image',
      'name'  => 'image_scale_and_crop',
      'data'  => array(
        'width' => 940,
        'height' => 470,
      ),
      'isid' => $style['isid'],
    );
    image_effect_save($effects);
  };

  $image_style = image_style_load('rlisting-teaser');
  if (!$image_style) {
    $profile_style = array(
      'name' => 'rlisting-teaser',
      'module' => 'rlisting',
    );
    $style = image_style_save($profile_style);
    $effects = array(
      'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
      'effect callback' => 'image_scale_crop_effect',
      'form callback' => 'image_resize_form',
      'summary theme' => 'image_resize_summary',
      'module'    => 'image',
      'name'  => 'image_scale_and_crop',
      'data'  => array(
        'width' => 250,
        'height' => 175,
      ),
      'isid' => $style['isid'],
    );
    image_effect_save($effects);
  };

  $image_style = image_style_load('rlisting-profile');
  if (!$image_style) {
    $profile_style = array(
      'name' => 'rlisting-profile',
      'module' => 'rlisting',
    );
    $style = image_style_save($profile_style);
    $effects = array(
      'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
      'effect callback' => 'image_scale_crop_effect',
      'form callback' => 'image_resize_form',
      'summary theme' => 'image_resize_summary',
      'module'    => 'image',
      'name'  => 'image_scale_and_crop',
      'data'  => array(
        'width' => 1500,
        'height' => 150,
      ),
      'isid' => $style['isid'],
    );
    image_effect_save($effects);
  };

};
